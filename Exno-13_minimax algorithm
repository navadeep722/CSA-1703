import math
print("192371068-D.Navadeep")
# Define players
HUMAN = 'O'
AI = 'X'
EMPTY = ' '

# Create initial board
def create_board():
    return [[EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY]]

# Print the board
def print_board(board):
    for row in board:
        print('|'.join(row))
    print()

# Check for winner
def check_winner(board):
    for row in board:
        if row.count(row[0]) == 3 and row[0] != EMPTY:
            return row[0]
    for col in range(3):
        if (board[0][col] == board[1][col] == board[2][col]) and board[0][col] != EMPTY:
            return board[0][col]
    if (board[0][0] == board[1][1] == board[2][2]) and board[0][0] != EMPTY:
        return board[0][0]
    if (board[0][2] == board[1][1] == board[2][0]) and board[0][2] != EMPTY:
        return board[0][2]
    return None

# Check if board is full
def is_full(board):
    return all(cell != EMPTY for row in board for cell in row)

# Get available moves
def get_available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == EMPTY]

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == AI:
        return 1
    elif winner == HUMAN:
        return -1
    elif is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i, j in get_available_moves(board):
            board[i][j] = AI
            score = minimax(board, depth + 1, False)
            board[i][j] = EMPTY
            best_score = max(best_score, score)
        return best_score
    else:
        best_score = math.inf
        for i, j in get_available_moves(board):
            board[i][j] = HUMAN
            score = minimax(board, depth + 1, True)
            board[i][j] = EMPTY
            best_score = min(best_score, score)
        return best_score

# Best move for AI
def best_move(board):
    best_score = -math.inf
    move = None
    for i, j in get_available_moves(board):
        board[i][j] = AI
        score = minimax(board, 0, False)
        board[i][j] = EMPTY
        if score > best_score:
            best_score = score
            move = (i, j)
    return move

# Game loop
def play_game():
    board = create_board()
    print_board(board)

    while True:
        # Human move
        i, j = map(int, input("Enter your move (row col): ").split())
        if board[i][j] != EMPTY:
            print("Invalid move. Try again.")
            continue
        board[i][j] = HUMAN
        print_board(board)
        if check_winner(board) or is_full(board):
            break

        # AI move
        ai_move = best_move(board)
        if ai_move:
            board[ai_move[0]][ai_move[1]] = AI
        print("AI's move:")
        print_board(board)
        if check_winner(board) or is_full(board):
            break

    winner = check_winner(board)
    if winner:
        print(f"{winner} wins!")
    else:
        print("It's a draw!")

# Run the game
if __name__ == "__main__":
    play_game()
