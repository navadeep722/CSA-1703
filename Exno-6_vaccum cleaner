from queue import Queue
print("192371068-D.Navadeep")
# Define grid positions
GRID = [(0, 0), (0, 1), (1, 0), (1, 1)]

def is_valid_move(x, y):
    return (x, y) in GRID

def get_successors(state):
    x, y, dirt = state
    successors = []
    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # possible moves
    for dx, dy in moves:
        new_x, new_y = x + dx, y + dy
        if is_valid_move(new_x, new_y):
            new_dirt = list(dirt)
            if new_dirt[GRID.index((new_x, new_y))] == 1:
                new_dirt[GRID.index((new_x, new_y))] = 0
            successors.append((new_x, new_y, tuple(new_dirt)))
    return successors

def bfs():
    start = (0, 0, (1, 1, 1, 1))  # All dirty at start
    goal = (None, None, (0, 0, 0, 0))  # Goal: all clean
    frontier = Queue()
    frontier.put([start])
    visited = set([start])
    
    while not frontier.empty():
        path = frontier.get()
        current_state = path[-1]
        
        if current_state[2] == goal[2]:
            return path
        
        for child in get_successors(current_state):
            if child not in visited:
                visited.add(child)
                frontier.put(path + [child])
    return None

def print_solution(path):
    for i, state in enumerate(path):
        x, y, dirt = state
        print(f"Step {i}: Position({x},{y}), Dirt Status: {dirt}")

# Run BFS to find the solution
solution = bfs()
if solution:
    print("Vacuum Cleaner Solution:")
    print_solution(solution)
else:
    print("No solution found.")
