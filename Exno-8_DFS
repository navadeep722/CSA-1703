# Class to represent a graph
class Graph:
    print("192371068-D.Navadeep")
    def __init__(self, vertices):
        self.vertices = vertices  # Number of vertices
        self.graph = {i: [] for i in range(vertices)}  # Adjacency list

    # Add edge to the graph
    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    # DFS traversal starting from a given node
    def dfs(self, start_vertex):
        visited = [False] * self.vertices  # To keep track of visited vertices
        self._dfs_recursive(start_vertex, visited)

    # Helper function for recursive DFS
    def _dfs_recursive(self, vertex, visited):
        visited[vertex] = True
        print(vertex, end=' ')  # Print the visited vertex

        # Recur for all the vertices adjacent to this vertex
        for neighbor in self.graph[vertex]:
            if not visited[neighbor]:
                self._dfs_recursive(neighbor, visited)

# Example usage:
# Create a graph with 5 vertices (0 to 4)
g = Graph(5)
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 3)
g.add_edge(1, 4)

print("DFS starting from vertex 0:")
g.dfs(0)
